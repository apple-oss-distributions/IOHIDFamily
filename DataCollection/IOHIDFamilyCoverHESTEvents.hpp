// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from stdin

#ifndef __stdin_IOHIDFamilyCoverHESTEvents_hpp__
#define __stdin_IOHIDFamilyCoverHESTEvents_hpp__

#include <ProtocolBuffer/ProtocolBuffer.hpp>

namespace awdmetrics {

class IOHIDFamilyCoverHESTEvents : public PB::Base {
private:
    uint64_t _timestamp;
    uint32_t _closeCount;
    uint32_t _openCount;
    uint32_t _toggled100250ms;
    uint32_t _toggled250500ms;
    uint32_t _toggled5001000ms;
    uint32_t _toggled50100ms;
    uint32_t _toggled50ms;
    uint32_t _unknownStateEnter;
    uint32_t _unknownStateExit;
    struct {
        int timestamp:1;
        int closeCount:1;
        int openCount:1;
        int toggled100250ms:1;
        int toggled250500ms:1;
        int toggled5001000ms:1;
        int toggled50100ms:1;
        int toggled50ms:1;
        int unknownStateEnter:1;
        int unknownStateExit:1;
    } _has;

public:
    IOHIDFamilyCoverHESTEvents() noexcept;
    ~IOHIDFamilyCoverHESTEvents() noexcept;
    IOHIDFamilyCoverHESTEvents(const IOHIDFamilyCoverHESTEvents &deepCopy) noexcept;
    IOHIDFamilyCoverHESTEvents& operator=(const IOHIDFamilyCoverHESTEvents &deepCopy) noexcept;
    IOHIDFamilyCoverHESTEvents(IOHIDFamilyCoverHESTEvents &&move) noexcept;
    IOHIDFamilyCoverHESTEvents& operator=(IOHIDFamilyCoverHESTEvents &&move) noexcept;

    uint64_t timestamp() const { return _timestamp; }
    void timestamp(uint64_t v) { _has.timestamp = true; _timestamp = v; }
    bool hasTimestamp() const { return _has.timestamp; }

    uint32_t openCount() const { return _openCount; }
    void openCount(uint32_t v) { _has.openCount = true; _openCount = v; }
    bool hasOpenCount() const { return _has.openCount; }

    uint32_t closeCount() const { return _closeCount; }
    void closeCount(uint32_t v) { _has.closeCount = true; _closeCount = v; }
    bool hasCloseCount() const { return _has.closeCount; }

    uint32_t toggled50ms() const { return _toggled50ms; }
    void toggled50ms(uint32_t v) { _has.toggled50ms = true; _toggled50ms = v; }
    bool hasToggled50ms() const { return _has.toggled50ms; }

    uint32_t toggled50100ms() const { return _toggled50100ms; }
    void toggled50100ms(uint32_t v) { _has.toggled50100ms = true; _toggled50100ms = v; }
    bool hasToggled50100ms() const { return _has.toggled50100ms; }

    uint32_t toggled100250ms() const { return _toggled100250ms; }
    void toggled100250ms(uint32_t v) { _has.toggled100250ms = true; _toggled100250ms = v; }
    bool hasToggled100250ms() const { return _has.toggled100250ms; }

    uint32_t toggled250500ms() const { return _toggled250500ms; }
    void toggled250500ms(uint32_t v) { _has.toggled250500ms = true; _toggled250500ms = v; }
    bool hasToggled250500ms() const { return _has.toggled250500ms; }

    uint32_t toggled5001000ms() const { return _toggled5001000ms; }
    void toggled5001000ms(uint32_t v) { _has.toggled5001000ms = true; _toggled5001000ms = v; }
    bool hasToggled5001000ms() const { return _has.toggled5001000ms; }

    uint32_t unknownStateEnter() const { return _unknownStateEnter; }
    void unknownStateEnter(uint32_t v) { _has.unknownStateEnter = true; _unknownStateEnter = v; }
    bool hasUnknownStateEnter() const { return _has.unknownStateEnter; }

    uint32_t unknownStateExit() const { return _unknownStateExit; }
    void unknownStateExit(uint32_t v) { _has.unknownStateExit = true; _unknownStateExit = v; }
    bool hasUnknownStateExit() const { return _has.unknownStateExit; }

    bool readFrom(PB::Reader &reader) override;

    void writeTo(PB::Writer &writer) const override;

    void formatText(PB::TextFormatter &formatter, const char *tag) const override;

    bool operator==(const IOHIDFamilyCoverHESTEvents& rhs) const;
    bool operator!=(const IOHIDFamilyCoverHESTEvents& rhs) const { return !(*this==rhs); }

    size_t hash_value() const;

    friend void swap(IOHIDFamilyCoverHESTEvents&, IOHIDFamilyCoverHESTEvents&) noexcept;

}; // End class IOHIDFamilyCoverHESTEvents

}; // End namespace awdmetrics

namespace std {
    template<> struct hash<awdmetrics::IOHIDFamilyCoverHESTEvents> {
        size_t operator()(awdmetrics::IOHIDFamilyCoverHESTEvents const& obj) const { return obj.hash_value(); }
    };
};

#endif // defined(__stdin_IOHIDFamilyCoverHESTEvents_hpp__)

